name: CI/CD Pipeline

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - release-*
      - main
  

  workflow_dispatch:  # Manual trigger for the build job


jobs:
  lint:
    if: github.ref == 'refs/heads/main'
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Run Linter
        run: npm run lint

  security_scan:
    if: github.ref == 'refs/heads/main'
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Security Scan
        run: npm audit --audit-level=high

  build:
    if: github.ref == 'refs/heads/main'
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: security_scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Verify Docker Login
        run: docker info  # Debugging step to verify Docker login

      - name: Build Docker Image
        run: |
          docker build -t egbe01/easydrive:${{ github.sha }} .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push egbe01/easydrive:${{ github.sha }}

  post_deployment:
    if: contains(github.event.pull_request.base.ref, 'release-') && github.event.pull_request.head.ref == 'main'
    name: Provision Linode Server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Playbook
        uses: actions/checkout@v4

      - name: Set Environment Variables
        run: |
          echo "LINODE_HOST=${{ secrets.LINODE_HOST }}" >> $GITHUB_ENV
          echo "SSH_PRIVATE_KEY=${{ secrets.SSH_PRIVATE_KEY }}" >> $GITHUB_ENV

      - name: Run Ansible Playbook
        uses: ansible/ansible-lint-action@v6
        with:
          args: ansible-playbook ansible/provision.yml -i ansible/inventory.ini
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'

  deploy:
    if: github.event.pull_request.merged == true &&
        contains(github.event.pull_request.base.ref, 'release-') &&
        github.event.pull_request.head.ref == 'main'
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: post_deployment
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy Application with Ansible
        run: |
          echo "Deploying Docker image..."
          # Set environment variables for Docker image and tag
          export IMAGE_TAG="egbe01/easydrive:${{ github.sha }}"
          ansible-playbook ansible/deploy.yml -i ansible/inventory.ini --extra-vars "image_tag=$IMAGE_TAG"
